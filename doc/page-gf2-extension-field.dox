/*! 

\page gf2_extension_field Tutorial for GF(2^n) finite fields with n<64 

There are three main ways to use the openf4 library (from the simplest to the most involved):
<OL>
<LI>In Sage (not yet available): 
    <OL>
        <LI>F.<t>=GF(2)[]
        <LI>K.<t>=GF(2^31, name='t', modulus=t^31+t^3+1)
        <LI>R.<x0,x1,x2,x3,x4,x5> = K[]
        <LI>I = ideal((t+t^3)*x0+(t+t^3)*x1+(t+t^3)*x2+(t+t^3)*x3+(t+t^3)*x4+(t+t^3)*x5, (t+t^3)*x0*x1+(t+t^3)*x1*x2+(t+t^3)*x2*x3+(t+t^3)*x3*x4+(t+t^3)*x0*x5+(t+t^3)*x4*x5, (t+t^3)*x0*x1*x2+(t+t^3)*x1*x2*x3+(t+t^3)*x2*x3*x4+(t+t^3)*x0*x1*x5+(t+t^3)*x0*x4*x5+(t+t^3)*x3*x4*x5, (t+t^3)*x0*x1*x2*x3+(t+t^3)*x1*x2*x3*x4+(t+t^3)*x0*x1*x2*x5+(t+t^3)*x0*x1*x4*x5+(t+t^3)*x0*x3*x4*x5+(t+t^3)*x2*x3*x4*x5, (t+t^3)*x0*x1*x2*x3*x4+(t+t^3)*x0*x1*x2*x3*x5+(t+t^3)*x0*x1*x2*x4*x5+(t+t^3)*x0*x1*x3*x4*x5+(t+t^3)*x0*x2*x3*x4*x5+(t+t^3)*x1*x2*x3*x4*x5, (t+t^3)*x0*x1*x2*x3*x4*x5-1)
        <LI>I.groebner_basis('openf4')
    </OL>
<LI>As a C++ library:
    <OL>
        <LI>Include the library header: libopenf4.h.
        <LI>Link with the library during the compilation: -lopenf4
        <LI>Use the function groebnerBasisGF2ExtensionF4(std::string modulo, int nbVariable, std::vector<std::string> variableName, std::string polyVarName, std::vector<std::string> polynomialList, int nbThread, int verbose);
        <LI>Look at the example tutorial-gf2-extension-method2.cpp into the section example.
    </OL>
<LI>As a template library:
    <OL>
        <LI>Include the header openf4.h.
        <LI>Create and configure the element type with your modulo:
        <UL>
            <LI> If degree < 16 use ElementGF2Extension<uint16_t>
            <LI> If degree < 32 use ElementGF2Extension<uint32_t>
            <LI> If degree < 64 use ElementGF2Extension<uint64_t>
        </UL>
        <LI>Configure the class monomial with the number of variables and an initial degree for the monomial precomputation.
        <LI>Create an ideal with a vector of polynomials and others informations: F4::Ideal::Ideal(std::vector<Polynomial<Element>> & polynomialArray, int nbVariable, int capacity, int degree);
        <LI>Call the method f4: F4::Ideal::f4();
        <LI>Compile with:
        <UL>
            <LI> -std=c++11 to enable c++11 support
            <LI> -DNDEBUG to disable assertion 
            <LI> -fopenmp to use parallelisation 
            <LI> -march=native to use vectorisation (if your system support SSE instructions).
            <LI> -03 -funroll-loops -ftree-vectorize (for fast)
            <LI> -Wall -Wno-strict-overflow to enable useful warning.
        </UL>
        <LI>Link with:
        <UL>
            <LI> -fopenmp to use parallelisation
        </UL>
        <LI>Look at the example tutorial-gf2-extension-method3.cpp into the section example.
    </OL>
</OL>

*/

